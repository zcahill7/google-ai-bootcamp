# -*- coding: utf-8 -*-
"""066aa876-ec98-4ddb-93d5-afdc2025acc2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/embedded/projects/qwiklabs-gcp-03-d3c5d190e927/locations/us-central1/repositories/066aa876-ec98-4ddb-93d5-afdc2025acc2
"""



"""# Challenge Three
# Gemini + BigQuery: Enhancing Public Health Communication

# Step 1:
# Create Data set for Challenge Three
# Load data into table for Challenge Three
"""

# Commented out IPython magic to ensure Python compatibility.
# # Running this code will create a new SCHEMA or DATASET in BigQuery
# # Store results of this query in create_dataset_results
# 
# %%bigquery create_dataset_results
# CREATE SCHEMA IF NOT EXISTS challenge_three
# OPTIONS (
#   location="us",
#   default_table_expiration_days=14
# );

# Results of the CREATE SCHEMA (dataset) and CREATE OR REPLACE TABLE queries
create_dataset_results

# Run bq command to load data from a CSV file in a Google bucket to our new dataset / table
# Store results of query in load_data_results

!bq load --autodetect --source_format=CSV --skip_leading_rows=1 --field_delimiter=',' challenge_three.orig_data gs://labs.roitraining.com/data-to-ai-workshop/weather_data.csv

# Commented out IPython magic to ensure Python compatibility.
# # Show table from BigQuery
# # Store results in get_orig_data
# %%bigquery get_orig_data
# SELECT * FROM challenge_three.orig_data

# Show results from the load table
get_orig_data

"""# Step 2: Create connection to Gemini model"""

# Commented out IPython magic to ensure Python compatibility.
# # Add Gemini model within the challenge_three dataset using default connection
# # Store results in create_model_results
# 
# %%bigquery create_model_results
# CREATE OR REPLACE MODEL
#   `challenge_three.gemini_model` REMOTE
# WITH CONNECTION DEFAULT OPTIONS (ENDPOINT = 'gemini-2.0-flash');

# Show create_model_results
create_model_results

"""# Step 3:
# Write a SQL query that uses the ML.GENERATE_TEXT function to create a weather report or warning based on the weather data in the table.
"""

# Commented out IPython magic to ensure Python compatibility.
# # Use Gemini to generate a weather report based on the imported weather data
# # Save weather table with weather report to new table
# 
# %%bigquery generate_weather_reports
# CREATE OR REPLACE TABLE challenge_three.transformed_data AS (
#   SELECT
#     ml_generate_text_result['candidates'][0]['content']["parts"][0]["text"] AS generated_text,
#     *
#   FROM
#     ML.GENERATE_TEXT(
#       MODEL `challenge_three.gemini_model`,
#       (
#         SELECT
#           CONCAT('Generate a weather reports from the text: ', date, city, state, temperature_f, wind_speed_mph, precipitation_in, barometric_pressure_inHg, humidity_percent, weather_condition) AS prompt
#         FROM
#           `challenge_three.orig_data`
#       ),
#       STRUCT(
#         0.2 AS temperature,
#         1000 AS max_output_tokens))
# );
#

# Commented out IPython magic to ensure Python compatibility.
# # Get new table with weather report
# # Store results in get_weather_reports
# 
# %%bigquery get_weather_reports
# SELECT * FROM challenge_three.transformed_data

# Show get_weather_reports
get_weather_reports
