# -*- coding: utf-8 -*-
"""Challenge_1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/embedded/projects/qwiklabs-gcp-03-d3c5d190e927/locations/us-central1/repositories/361b2194-4c7c-42ce-8500-98f74b5ddb11

# Challenge 1
# Step 1: Create a Jupyter Notebook using Vertex AI Colab Enterprise, and write the code to do the following. You can use SQL, Python, or a combination of the two.
"""

# Commented out IPython magic to ensure Python compatibility.
# # Running this code will create a new SCHEMA or DATASET in BigQuery
# # Store results of this query in create_dataset_results
# 
# %%bigquery create_dataset_results
# CREATE SCHEMA IF NOT EXISTS challenge_one
# OPTIONS (
#   location="us",
#   default_table_expiration_days=14
# );
#

# Results of the CREATE SCHEMA (dataset) and CREATE OR REPLACE TABLE queries
create_dataset_results

"""# Step 2: Load data into the new dataset table"""

# Run bq command to load data from a CSV file in a Google bucket to our new dataset / table
# Store results of query in load_data_results

!bq load --autodetect --source_format=CSV --skip_leading_rows=1 --field_delimiter=',' challenge_one.orig_data gs://labs.roitraining.com/data-to-ai-workshop/fraud_data_raw.csv

# Commented out IPython magic to ensure Python compatibility.
# # Transform data
# # Modify the raw data elements in the following ways:
# # a. One-hot encode the Employment_Status and Device_Type fields
# # b. Break the age field into bins (e.g., 18–24, 25–34, 35–44, etc.)
# # c. Create a field called Income-to-Amount-Requested which is the ratio of those fields
# # d. Create a calculated field called Time_Since_Previous_Assistance
# # e. Change True/False fields to 0s and 1s
# # Save the modified data to another table called fraud_training_data
# # Save results in transform_data
# 
# %%bigquery transform_data
# CREATE OR REPLACE TABLE `challenge_one.fraud_training_data` AS (
#    SELECT
# #     -- Select all original columns, excluding those we are transforming to avoid duplication
#      * EXCEPT (
#        Employment_Status, Device_Type, Age, Previous_Assistance_Received, Supporting_Doc_Verified
#      ),
# 
# #     -- Step 1: One-hot encode Employment_Status
# #     -- Creates a new column for each category with a 1 or 0
#      CASE WHEN Employment_Status = 'Employed' THEN 1 ELSE 0 END AS emp_status_employed,
#      CASE WHEN Employment_Status = 'Unemployed' THEN 1 ELSE 0 END AS emp_status_unemployed,
#      CASE WHEN Employment_Status = 'Self-Employed' THEN 1 ELSE 0 END AS emp_status_self_employed,
# 
# #     -- Step 1: One-hot encode Device_Type
#      CASE WHEN Device_Type = 'Mobile' THEN 1 ELSE 0 END AS device_type_mobile,
#      CASE WHEN Device_Type = 'Desktop' THEN 1 ELSE 0 END AS device_type_desktop,
#      CASE WHEN Device_Type = 'Tablet' THEN 1 ELSE 0 END AS device_type_tablet,
# 
# #     -- Step 2: Break the age field into bins
# #     -- Creates a new categorical feature from the numerical age
#      CASE
#        WHEN Age BETWEEN 18 AND 24 THEN '18-24'
#        WHEN Age BETWEEN 25 AND 34 THEN '25-34'
#        WHEN Age BETWEEN 35 AND 44 THEN '35-44'
#        WHEN Age BETWEEN 45 AND 54 THEN '45-54'
#        WHEN Age BETWEEN 55 AND 64 THEN '55-64'
#        ELSE '65+'
#      END AS age_bin,
# 
# #     -- Step 3: Create a ratio of Income to Amount Requested
# #     -- SAFE_DIVIDE prevents errors if Amount_Requested is 0
#      SAFE_DIVIDE(Income, Amount_Requested) AS Income_to_Amount_Requested,
# 
# #     -- Step 4: Create a field for Days Since Previous Assistance
# #     -- Calculates the number of days between the current date and the Previous_Assistance_Date.
# #     -- Returns NULL if Previous_Assistance_Date is NULL.
#      DATE_DIFF(CURRENT_DATE(), Previous_Assistance_Date, DAY) AS Time_Since_Previous_Assistance,
# 
# #     -- Step 5: Change boolean (True/False) fields to integers (0/1)
# #     -- Assumes you have boolean fields named Has_Fraud_History and Is_Repeat_Customer
#      CAST(Previous_Assistance_Received AS INT64) AS Previous_Assistance_Received_int,
#      CAST(Supporting_Doc_Verified AS INT64) AS Supporting_Doc_Verified_int
# 
#    FROM
#      `challenge_one.orig_data`
#  );
#

# Show results from transform
transform_data
